// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MainPage component should render component 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MainPage
    isPending={false}
    onRequestRobots={[Function]}
    robots={Array []}
    searchField=""
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1
          className="f1"
>
          RoboFriends
</h1>,
        <SearchBox
          change={[Function]}
/>,
        <ErrorBoundary>
          <Unknown
                    isPending={false}
                    robots={Array []}
          />
</ErrorBoundary>,
      ],
      "className": "tc",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "RoboFriends",
          "className": "f1",
        },
        "ref": null,
        "rendered": "RoboFriends",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "change": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Unknown
            isPending={false}
            robots={Array []}
/>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "isPending": false,
            "robots": Array [],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1
            className="f1"
>
            RoboFriends
</h1>,
          <SearchBox
            change={[Function]}
/>,
          <ErrorBoundary>
            <Unknown
                        isPending={false}
                        robots={Array []}
            />
</ErrorBoundary>,
        ],
        "className": "tc",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "RoboFriends",
            "className": "f1",
          },
          "ref": null,
          "rendered": "RoboFriends",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "change": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Unknown
              isPending={false}
              robots={Array []}
/>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "isPending": false,
              "robots": Array [],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
